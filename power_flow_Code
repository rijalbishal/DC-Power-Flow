import numpy as np
Bus_data = np.loadtxt('bus.txt', delimiter = ' ', skiprows = 1, dtype = float)
branch_data = np.loadtxt('branch.txt', delimiter = ' ', skiprows = 1, dtype = float)

# Finding the Number of Buses
n=np.shape(Bus_data)
n=n[0]
#Finding numbers of branches present
m=np.shape(branch_data)
m=m[0]

# Calculate net power in each Bus
p = Bus_data[:,1,None] - Bus_data[:,2,None]
print("New power=",p)

#Initiliaze zero matrix for impedance
b = np.zeros((n,n))  
#Replace zero matrix elements with actual ones
for i in range(m):       
    j = branch_data[i,0]    
    k = branch_data[i,1]   
    b[int(j-1),int(k-1)] = branch_data[i,2]     
    b[int(k-1),int(j-1)] = branch_data[i,2]     
    b[int(k-1),int(k-1)] -= branch_data[i,2]    
    b[int(j-1),int(j-1)] -= branch_data[i,2]    

# Conidering 1st bus to be slack bus 
b=np.delete(b,0,0)
b=np.delete(b,0,1)
print("Impedance Matrix After removing slack Bus=",b)

# Removing the data of slack bus from power matrix
p=np.delete(p,0,0)
print("power matrix After removing slack Bus=",p)

#Calulating the inverse of impedance matrix
w = np.linalg.inv(b)

d = np.dot(w,p)
zero_row = np.zeros(d.shape[1])   
d=np.vstack([zero_row,d])  

print("Solution of each Bus Angles=",d)

# Identifying the power through each of the branches

for u in range(m):
    j = branch_data[u, 0]    
    k = branch_data[u, 1]   

    # Calculate Branch_power 
    Branch_power = - branch_data[u,2] * (d[int(j-1),0] - d[int(k-1),0])
    
    # Print the result
    print(f"Power flow from bus {j} to bus {k} is = {Branch_power}")

